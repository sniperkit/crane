package parser

const (
	mainTemplate = `// generated by repackr; DO NOT EDIT
package main

import (
    "fmt"
    "os"
    "sort"
)

var programs = map[string]func() {
}

func main() {
    if len(os.Args) < 2 {
        fmt.Println("Missing program argument. Valid values:", cmds())
        os.Exit(1)
    }

    programName := os.Args[1]
    if _, ok := programs[programName]; !ok {
        fmt.Printf("Unknown program: \"%v\". Valid values: %v\n", programName, cmds())
        os.Exit(1)
    }

    os.Args = append([]string{os.Args[0]}, os.Args[2:]...)
    programs[programName]()
}

func cmds() []string {
    var cmds []string
    for key := range programs {
        cmds = append(cmds, key)
    }
    sort.Strings(cmds)
    return cmds
}
`
)

const (
	libraryTemplate = `// generated by repackr; DO NOT EDIT
package repacked

import (
    "fmt"
    "sort"
)

var programs = map[string]func() {
}

func Instance() Amalgomated {
    return &repacked{}
}

type Repacked interface {
    Run(cmd string)
    Cmds() []string
}

type repacked struct{}

func (a *repacked) Run(cmd string) {
    if _, ok := programs[cmd]; !ok {
        panic(fmt.Sprintf("Unknown command: \"%v\". Valid values: %v", cmd, a.Cmds()))
    }
    programs[cmd]()
}

func (a *repacked) Cmds() []string {
    var cmds []string
    for key := range programs {
        cmds = append(cmds, key)
    }
    sort.Strings(cmds)
    return cmds
}
`
)
